#include "EvilUnit.h"
#include "hostrpc_printf.h"

static bool __printf_conversion_specifier_p_reference(char c)
{
  // excluding % which is handled elsewhere

  char specs[] = {'c', 's', 'd', 'i', 'o', 'x', 'X', 'u', 'f',
                  'F', 'e', 'E', 'a', 'A', 'g', 'G', 'n', 'p'};
  size_t N = sizeof(specs);

  bool hit = false;
  for (size_t i = 0; i < N; i++)
    {
      hit = hit | (c == specs[i]);
    }
  return hit;
}

static enum __printf_spec_t next_specifier(const char *format, size_t len,
                                           size_t *input_offset)
{
  size_t loc = __printf_next_specifier_location(format, len, *input_offset);
  *input_offset = loc;
  return __printf_specifier_classify(format, loc);
}

static enum __printf_spec_t next_spec(const char *format)
{
  size_t offset = 0;
  return next_specifier(format, __printf_strlen(format), &offset);
}

static MODULE(specifier)
{
  TEST("conversion_specifier")
  {
    for (unsigned i = 0; i < 256; i++)
      {
        unsigned char u = (unsigned char)i;
        char c;
        __builtin_memcpy(&c, &u, 1);

        bool cur = __printf_conversion_specifier_p(c);
        bool ref = __printf_conversion_specifier_p_reference(c);

        CHECK(cur == ref);
      }
  }

  TEST("count")
  {
    CHECK(next_spec("%") == spec_none);
    CHECK(next_spec("%a") == spec_normal);
    CHECK(next_spec("a%a") == spec_normal);
    CHECK(next_spec("a%a") == spec_normal);
  }

  TEST("literal %")
  {
    CHECK(next_spec("%%") == spec_none);
    CHECK(next_spec(" %%") == spec_none);
  }

  TEST("string literal")
  {
    CHECK(next_spec("%s") == spec_string);
    CHECK(next_spec("%ls") == spec_string);
    CHECK(next_spec(" %s") == spec_string);
    CHECK(next_spec(" %ls") == spec_string);
    CHECK(next_spec("s%s") == spec_string);
    CHECK(next_spec("s%ls") == spec_string);
    CHECK(next_spec("s%%s") == spec_none);
    CHECK(next_spec("s%%ls") == spec_none);
  }

  TEST("output")
  {
    CHECK(next_spec("%hhn") == spec_output);
    CHECK(next_spec("%hn") == spec_output);
    CHECK(next_spec("%n") == spec_output);
    CHECK(next_spec("%ln") == spec_output);
    CHECK(next_spec("%lln") == spec_output);
    CHECK(next_spec("%jn") == spec_output);
    CHECK(next_spec("%zn") == spec_output);
    CHECK(next_spec("%tn") == spec_output);
  }

  TEST("check stays within bounds")
  {
    size_t offset = 0;

    // empty
    offset = 0;
    CHECK(next_specifier("", 0, &offset) == spec_none);
    CHECK(offset == 0);

    // single %
    offset = 0;
    CHECK(next_specifier("%", __printf_strlen("%"), &offset) == spec_none);
    CHECK(offset == 1);
    CHECK(next_specifier("%", __printf_strlen("%"), &offset) == spec_none);
    CHECK(offset == 1);

    // literal
    offset = 0;
    CHECK(next_specifier("%%", __printf_strlen("%%"), &offset) == spec_none);
    CHECK(offset == 2);
    CHECK(next_specifier("%%", __printf_strlen("%%"), &offset) == spec_none);
    CHECK(offset == 2);

    // string
    offset = 0;
    CHECK(next_specifier("%s", __printf_strlen("%s"), &offset) == spec_string);
    CHECK(offset == 1);  // return offset of s
    CHECK(next_specifier("%s", __printf_strlen("%s"), &offset) == spec_none);
    CHECK(offset == 2);
  }
}
